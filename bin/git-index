#!/usr/bin/perl

package bin::git::index;

use strict;
use warnings;

use Pod::Usage;
use Getopt::Long;
use Git::Elasticsearch;

=head1 git-index

Index the current git branch into Elasticsearch.

Creates an index named as the basename of the 'origin' remote's url, or failing that, the TLD of your repository.
Index name will be lowercase.  If your repo name is not a valid name for an ES index, you can pass --index to use a custom name.

Only indexes SHAs since the last time you ran it.

=head2 USAGE

    git index [--reindex] [--sha 0xdeadbeef]

=over 

=item B<--reindex> wipe the data and try again.  Useful for when force pushes happen, but this means things will take a long time for large repositories.

=item B<--sha> Start from the provided SHA rather than since the newest SHA found in the index.

=item B<--index> Use a custom index name.

=item B<--help> Print this message.

=back

=cut

exit main(@ARGV) unless caller();

sub main {
    my (@args) = @_;

    my ($reingest, $sha, $help, $index);

    Getopt::Long::GetOptionsFromArray(\@args,
        'reindex' => \$reingest,
        'sha=s'   => \$sha,
        'index=s' => \$index,
        'help'    => \$help,
    );

    pod2usage( -exitval => 0, -verbose => 2 ) if $help;

    $Git::Elasticsearch::index = $index if $index;

    $sha //= Git::Elasticsearch::get_last_sha() unless $reingest;

    my $sha_nice = $sha ? $sha : 'root';
    print "Indexing commits newer than $sha_nice...\n";

    return 0 if Git::Elasticsearch::index_log($sha,$reingest);
    return 1;
}
