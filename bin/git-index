#!/usr/bin/perl

package bin::git::index;

use strict;
use warnings;

use Pod::Usage;
use Getopt::Long;
use Git::Elasticsearch;

=head1 git-index

Index the current git branch into Elasticsearch.

Creates an index named as the basename of the 'origin' remote's url, or failing that, the TLD of your repository.
Index name will be lowercase.  If your repo name is not a valid name for an ES index, you can pass --index to use a custom name.

Only indexes SHAs since the last time you ran it, unless you specify otherwise.

=head2 USAGE

    git index [--reindex] [--start deadbeef] [--stop cafebabe] [--index myindex]

=over 

=item B<--reindex> wipe the data and try again.  Useful for when force pushes happen, but this means things will take a long time for large repositories.

=item B<--stop SHA> Stop at the provided SHA rather than since the newest SHA found in the index.

This is *non-inclusive* save in the case your start is your stop.

=item B<--start SHA> Start indexing at SHA rather than the latest HEAD.

This is useful for grabbing commits which time-warp ahead of commits proceeding them (which as such may be missed, and need manual ingest).
If you make a habit of this, consider stashing your "latest" sha somewhere and feed in the stop and start appropriately in your cron.

=item B<--index NAME> Use a custom index name.

=item B<--help> Print this message.

=back

=cut

exit main(@ARGV) unless caller();

sub main {
    my (@args) = @_;

    my ($reingest, $stop_sha, $help, $index, $start_sha);

    Getopt::Long::GetOptionsFromArray(\@args,
        'reindex' => \$reingest,
        'stop=s'  => \$stop_sha,
        'start=s' => \$start_sha,
        'index=s' => \$index,
        'help'    => \$help,
    );

    pod2usage( -exitval => 0, -verbose => 2 ) if $help;

    $Git::Elasticsearch::index = $index if $index;

    $stop_sha //= Git::Elasticsearch::get_last_sha() unless $reingest;

    my $sha_nice = $stop_sha ? $stop_sha : 'root';
    print "Indexing commits newer than $sha_nice...\n";
    print "Stopping after $start_sha...\n" if $start_sha;

    return 0 if Git::Elasticsearch::index_log($stop_sha,$reingest, $start_sha);
    return 1;
}
